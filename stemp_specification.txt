Stemp Templating language specification
=======================================

Stemp is a very, very simple templating language. It's *S*imple *Temp*lating.
haha, get it?

Anyways, it's pretty easy to use.

Template files
==============
Template files should be named <filename>.stemp.  This should include the file
extension, so if you are templating `nginx.conf`, your template should be named
`nginx.cong.stemp`.

If you don't want to do this, whatever, It's only PART OF THE GODDAMN SPEC!!!!
But seriously, if you don't this won't blow up. This is literally just a
convention I made up while sitting in a massage chair because I wanted to make
up a convention.

What's inside the file should be *exactly* what you want the output to look
like, with one exception. Well, usually there should be a bunch of exceptions,
but you get what I mean.  Wherever you want Stemp to render a value, you need
to add a token.  What's a token? Simple: it's a word surrounded by "$(" and ")"
It doesnt even have to be a word. It can literally be anything.  Well not
*anything*, you can't put like, a banana in there.  Unless it's a banana emoji.
that *might* work, but frankly I haven't tested it.

What are tokens for? Easy - playing arcade games! Wait, no wrong kind of token.
Actually, they're used to mark places in the template where Stemp will insert a
value.  The whole token, "$(" and ")" included will be swapped out for whatever
the matching value in the values file is.

What's the values file, you ask? Good question! It's a file in JSON format
containing the dictionary that Stemp will use to turn tokens into actual text
in the output. So if your values file contains `{'cows': 'say moo'}`, then the
token `$(cows)` will be turned into `say moo` in the output file.

Example
=======
Lets say you have a template file named `friends.txt.stemp`. It has the
following content:
```
My name is $(my_name), And I have friends. My best friend is $(best_friend),
and my worst enemy is $(total_douchecanoe).
```

You also create a values file named `monday.json` with the following content:
```
{
  "my_name": "Ash Ketchum",
  "best_friend": "Pikachu",
  "total_douchecanoe": "Gary Oldman"
}
```

You want to create a file named `friends.txt`, so you'd run this
command:
```
stemp monday.json --input-template friends.txt.stemp
```

The output would be:
```
My name is Ash Ketchum, And I have friends. My best friend is Pikachu,
and my worst enemy is Gary Oldman.
```

Yay! you made the right output! But this didn't go to a file.  You could either
use UNIX output redirection to save the file:
```
stemp monday.json --input-template friends.txt.stemp > friends.txt
```

Or, you could use the --output-file flag to have stemp create the file for you
```
stemp monday.json --input-template friends.txt.stemp --output-file friends.txt
```

If you used a different values file (tuesday.txt):
```
{
  "my_name": "Skeletor",
  "best_friend": "Prince Adam",
  "total_douchecanoe": "He-Man"
}
```

The output would be:
```
My name is Skeletor, And I have friends. My best friend is Prince Adam,
and my worst enemy is He-Man.
```


#optional args#

#recursive tokens#
